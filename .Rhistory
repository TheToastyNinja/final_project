<<<<<<< HEAD
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers>5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 ==1] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Betsutenjin"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals
$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals[["dinner"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"]["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast","lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast","lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lappy(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, "length()")
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_items <- lapply(meals, length)
append(vector, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
## install.packages("styler")
## library("styler")
#################
#### PART 1 #####
#################
# install.packages("stringr")
# library(stringr)
my_age <- 21
my_name <- "Matthew Young"
# takes in a name and age and returns a string including them both
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Hunger Games", "The City of Ember", "Frozen Solid", "Fableahaven", "An Inconvenient Truth", "Harry Potter")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
books[1]
# takes in a vector and and index and deletes the element at the given index
remove_book <- function(titles, index) {
titles[-index]
}
books_without_four <- remove_book(books, 4)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019/March/16", format = "%Y/%B/%d")
Sys.Date()
today <- Sys.Date()
spring_break - today
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list("Matt" = as.Date("1997/04/05", format = "%Y/%m/%d"), "Deb" = as.Date("1956/08/24", format = "%Y/%m/%d"), "Jeff" = as.Date("1951/09/05", format = "%Y/%m/%d"))
parent_bday <- format(birthdays[["Jeff"]], "%m/%d")
print(parent_bday)
birthdays_2019 <- lapply(lapply(birthdays, format, "2019/%m/%d"), as.Date, format = "%Y/%m/%d")
print(birthdays_2019)
# takes in a date and returns boolean true if the passed date has passed, false otherwise
date_has_passed <- function(date) {
bool <- date - Sys.Date() < 0
bool
}
date_has_passed(birthdays[["Jeff"]])
print(date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d")))
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", date - Sys.Date(), " days.", sep = "")
}
}
make_birthday_announcement("Matt", as.Date("2019/01/03", format = "%Y/%m/%d"))
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", bday - Sys.Date(), " days.", sep = "")
}
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
styler:::style_active_file()
print("Hi Jason :)")
print("Jason what year are you?")
print("Hi there :)")
library(httr)
library(jsonlite)
library(dplyr)
base_uri <- "https://api.propublica.org/congress/v1"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
propublica_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
library(jsonlite)
library(httr)
source("apikeys.R")
library(httr)
library(jsonlite)
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3/search?search=dogs")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri, key = api_key)
body <- fromJSON(response, "text")
response <- GET(base_uri, key = api_key)
body <- content(response, "text")
data <- fromJSON(body)
View(body)
View(data)
param <- list(key = api_key)
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list("key" = api_key, "part" = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list(key = api_key, part = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/search?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54
&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
house_listings <- read.csv("data/Metro_MedianListingPrie_AllHomes.csv", stringsAsFactors = FALSE)
library(plotly)
shiny::runApp('C:/Users/ymatt/Documents/final_project')
runApp('C:/Users/ymatt/Documents/final_project')
runApp('C:/Users/ymatt/Documents/final_project')
runApp('C:/Users/ymatt/Documents/final_project')
source("my_ui.R")
source("my_server.R")
setwd("C:/Users/ymatt/Documents/final_project")
source("my_ui.R")
source("my_server.R")
runApp()
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
usa <- map_data("state", "usa")
usa <- map_data("state")
runApp()
runApp()
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_ly(
state_map_data, type = 'choropleth', locationmode = `USA-states`
) %>%
layout (geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_ly(
state_map_data, type = 'choropleth', locationmode = "USA-states"
) %>%
layout (geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_ly(
state_map_data, type = 'choropleth', locationmode = "USA-states"
) %>%
layout (geo = g)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test <- state_map_data %>%
mutate(
interval = cut(two_bed_2019.01, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
=======
filter(RegionName == state_choices[1])) +
geom_line(mapping = aes(x = "Year", y = type_of_choices[2]))
ggplot(data = combined_state_df %>%
filter(RegionName == state_choices[1])) +
geom_line(mapping = aes_string(x = "Year", y = type_of_choices[2]))
ggplot(data = combined_state_df %>%
filter(RegionName == state_choices[4])) +
geom_line(mapping = aes_string(x = "Year", y = type_of_choices[2]))
sp <- combined_state_df %>%
filter(RegionName == state_choices[4])
View(sp)
ggplot(data = sp) +
geom_line(mapping = aes(x = "Year", y = "one_Bedroom_mean_price"))
ggplot(data = sp) +
geom_line(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_plot(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_plot(mapping = aes(x = Year, y = one_Bedroom_mean_price))
library(leaflet)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
ggplot(data = sp) +
geom_point(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_line(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_smooth(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_point(mapping = aes(x = Year, y = one_Bedroom_mean_price)) +
geom_smooth
ggplot(data = sp) +
geom_point(mapping = aes(x = Year, y = one_Bedroom_mean_price))
spp <- sp %>%
mutate(fakeMonth = 1:108)
View(spp)
spp <- sp %>%
mutate(fake_month = 1:108)
ggplot(data = spp) +
geom_point(mapping = aes(x =fake_month, y = one_Bedroom_mean_price))
ggplot(data = spp) +
geom_line(mapping = aes(x =fake_month, y = one_Bedroom_mean_price))
library(shiny)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
sos_df <- filter_for_state(state_choices[1])
View(sos_df)
sos <- draw_lines(sos_df, type_of_choices[1])
sos
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
types <- c(type_of_choices[1], type_of_choices[2])
types
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
color_type <- c(
"gray16", "deepskyblue2", "darkorchid3",
"blue1", "green4", "sienna3",
"violetred", "aquamarine1", "firebrick2"
)
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
sos
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], state_choices)])
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], state_choices)])
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
sos_df
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], state_choices)])
index <- index + 1
}
lines
View(sos_df)
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
View(sos_df)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
geom_line(mapping = aes_string(x = "fake_month", y = types[index]), color = "purple")
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]), color = "purple")
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]), color = "purple")
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[index], type_of_choices)])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[3])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[4])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[5])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[3], type_of_choices)])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[2], type_of_choices)])
index <- 1
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[index], type_of_choices)])
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
sos
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
View(sos_df)
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
View(sos_df)
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
sos
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos <- draw_lines(sos_df, typess)
sos
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(typess)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = typess[index]),
color = color_type[match(typess[index], type_of_choices)])
index <- index + 1
}
lines
View(sos_df)
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, typess)
sos
filter_for_state <- function(state) {
df <- combined_state_df %>%
filter(RegionName == state) %>%
mutate(
fake_month = 1:108
)
df
}
source('C:/Users/pguan/info201/assignment/final_project/my_server.R', echo=TRUE)
sos_df <- filter_for_state(state_choices[1])
filter_for_state <- function(state) {
df <- combined_state_df %>%
filter(RegionName == state) %>%
mutate(
fake_month = 1:108
)
df
}
draw_lines <- function(df, types) {
data_df <- df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = data_df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
}
sos_df <- filter_for_state(state_choices[1])
View(sos_df)
draw_lines <- function(df, types) {
lines <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
}
sos <- draw_lines(sos_df, typess)
sos
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, typess)
sos
sos
filter_for_state <- function(state) {
df <- combined_state_df %>%
filter(RegionName == state) %>%
mutate(
fake_month = 1:108
)
df
}
draw_lines <- function(df, types) {
lines <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
}
# install.packages("leaflet")
library(leaflet)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c(
"gray16", "deepskyblue2", "darkorchid3",
"blue1", "green4", "sienna3",
"violetred", "aquamarine1", "firebrick2"
)
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
state_choices <- one_Bedroom$RegionName
get_state_df <- function(df, index) {
df <- df %>%
select(-SizeRank) %>%
gather(
key = "Year",
value = types,
-RegionName
)
colnames(df)[3] <- type_of_choices[index]
df
}
combined_state_df <- get_state_df(one_Bedroom, 1) %>%
full_join(get_state_df(two_Bedroom, 2), by = c("Year", "RegionName")) %>%
full_join(get_state_df(three_Bedroom, 3), by = c("Year", "RegionName")) %>%
full_join(get_state_df(four_Bedroom, 4), by = c("Year", "RegionName")) %>%
full_join(get_state_df(five_Bedroom, 5), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Condo_Bedroom, 6), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Duplex_Triplex, 7), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Sfr, 8), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Studio, 9), by = c("Year", "RegionName"))
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!"),
textOutput("graph_Demonstration")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices),
br(),
p(strong("How did the listed price change from year for different types of housings?")),
p("The first visualization is a scattorplot showing how the national market of various types of rental housing have changed over the years. The x_axis represents the timeline from the Freburary of 2010 to the January of 2019. The y-axis represents the listed price. We used the data provided by Zillow to calculate the national average of different type of housings at specific time frames. Users can select mutiple housings from the checkbox to display the desired data on the graph for comparison. The overall market of all housings experienced different levels of decreases in listed price in 2010 and continual but slow increases from 2011 to 2019. The decrease in 2010 might be the result from the 2008 financial crisis. As the economy is recovering, the rental housing market revives. An exception is the five-bedroom homes whose listed price fluctuates over the years. It is not surprising because of its large size causing its demand on the rental market to be unpredictable.")
),
## Output: Tabset with plot
mainPanel(plotlyOutput(outputId = "plot_one", height = "800px"), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"Map",
sidebarLayout(
sidebarPanel(
radioButtons("house_type", "House Type:", c("1-Bed", "2-Bed", "3-Bed", "4-Bed", "5-Bed+", "Condo/Co-op", "Duplex/Triplex", "Single Family Residence (SFR)", "Studio"))
),
mainPanel(
plotOutput(outputId = "country_map")
)
)
)
page_four <- tabPanel("Table Graph")
page_five <- tabPanel(
"Year vs. Prices of various housing of states",
sidebarLayout(
sidebarPanel(
selectInput("states", "State", choices = state_choices, selected = state_choices[1]),
checkboxGroupInput("types", "Type of houses", choices = type_of_choices)
),
mainPanel(
plotlyOutput("draw_lines")
)
)
)
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabset_panel <- tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
>>>>>>> b108a0069ee3737747cee00f6cf93a42248ecf46
)
my_labels <- c("0-500", "500-1000", "1000-1500", "1500-2000", "2000-2500", "2500-3000", "3000-3500", "3500+")
test <- state_map_data %>%
mutate(
interval = cut(two_bed_2019.01, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
)
<<<<<<< HEAD
colors <- c("#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837")
my_server <- function(input, output, session){
output$country_map <- renderPlot({
ggplot(state_map_data) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = paste0(input$house_type, "_2019.01")),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
scale_fill_manual(paste0(input$house-type, "_2019.01") = colors)
})
}
runApp()
runApp()
runApp()
test <- state_map_data %>%
mutate(
interval = cut(two_bed_2019.01, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
)
colors <- c("#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837")
my_server <- function(input, output, session){
output$country_map <- renderPlot({
ggplot(test) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = interval),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_fill_manual(values = colors)
})
}
runApp()
runApp()
colors <- c("#1b7837", "#5aae61", "#a6dba0", "#d9f0d3", "#e7d4e8", "#c2a5cf", "#9970ab", "#762a83")
my_server <- function(input, output, session){
output$country_map <- renderPlot({
ggplot(test) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = "interval"),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_fill_manual(values = colors)
})
}
runApp()
runApp()
=======
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, typess)
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos <- draw_lines(sos_df, typess)
sos
sos
sos_df <- filter_for_state(state_choices[50])
sos <- draw_lines(sos_df, typess)
sos
typess <- c(type_of_choices[3], type_of_choices[5], type_of_choices[6])
sos_df <- filter_for_state(state_choices[50])
sos <- draw_lines(sos_df, typess)
sos
>>>>>>> b108a0069ee3737747cee00f6cf93a42248ecf46
runApp()
type_of_choices <- colnames(combined_df)[2:10]
names_of_selection <- substr(type_of_choices, nchar(type_of_choices) - 11, nchar(type_of_choices))
names_of_selection
names_of_selection <- substr(type_of_choices, 1, nchar(type_of_choices) - 11)
names_of_selection
runApp()
<<<<<<< HEAD
runApp()
View(test)
runApp()
=======
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
colnames(combined_state_df)[3:11] <-names_of_selection
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
sos <- filter_for_state(state_choices[1])
View(sos)
View(combined_state_df)
colnames(combined_state_df)[3:11] <- names_of_selection
View(combined_state_df)
sos <- filter_for_state(state_choices[1])
View(sos)
typesss <- c(names_of_selection[1], names_of_selection[2])
linesss <- draw_lines(sos, typesss)
linesss
>>>>>>> b108a0069ee3737747cee00f6cf93a42248ecf46
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
state_map_data
View(state_map_data)
runApp()
runApp()
interval_vec = cut(state_map_data$one_bed_2010.03, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
test <- state_map_data %>%
mutate(
interval = interval_vec
)
test$interval
interval_vec = cut(state_map_data$"one_bed_2010.03", breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval_vecc = cut(state_map_data$"one_bed_2010.03", breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval_vecc
get_interval <- function(house_type) {
interval = cut(state_map_data$house_type, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval
}
get_interval("one_bed_2019.01")
get_interval("one_bed_2019.01")
get_interval <- function(house_type) {
interval = cut(unlist(state_map_data[,house_type]), breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval
}
get_interval("one_bed_2019.01")
xixxii <- get_interval("one_bed_2019.01")
xixxii
source("my_ui.R")
<<<<<<< HEAD
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
colors <- c(my_labels = c("#1b7837", "#5aae61", "#a6dba0", "#d9f0d3", "#e7d4e8", "#c2a5cf", "#9970ab", "#762a83", na.value = "black"))
runApp()
=======
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
>>>>>>> b108a0069ee3737747cee00f6cf93a42248ecf46
runApp()
runApp()
runApp()
colorsss <- c(my_labels[1] = "#1b7837")
colorsss <- c("0-500" = "#1b7837")
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
colors <- c("#1b7837","#5aae61", "#a6dba0", "#d9f0d3", "#e7d4e8", "#c2a5cf", "#9970ab", "#762a83")
runApp()
colors <- c("#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#b10026")
runApp()
my_labels <- c("0-500", "500-1000", "1000-1500", "1500-2000", "2000-2500", "2500-3000", "3000-3500")
get_interval <- function(house_type) {
interval = cut(unlist(state_map_data[,house_type]), breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500), labels = my_labels)
interval
}
colors <- c( "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#b10026")
runApp()
my_server <- function(input, output){
output$country_map <- renderPlot({
df <- state_map_data %>%
mutate(
interval = get_interval(input$house_type)
)
ggplot(df) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = "interval"),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_fill_manual(values = colors, na.value = "grey")
})
}
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
runApp()
runApp()
runApp()
=======
source("my_ui.R")
source("my_ui.R")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
>>>>>>> b108a0069ee3737747cee00f6cf93a42248ecf46
runApp()
