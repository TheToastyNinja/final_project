<<<<<<< HEAD
df
}
c_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
c_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_3bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_4bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_5bed_plus <- read.csv("data/County_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
c_studio <- read.csv("data/County_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
c_sfr <- read.csv("data/County_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
c_duplex_triplex <- read.csv("data/County_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
c_condo_coop <- read.csv("data/County_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
c_1bed_edited <- change_colnames(c_1bed)
c_2bed_edited <- change_colnames_county(c_2bed)
c_3bed_edited <- change_colnames_county(c_3bed)
c_4bed_edited <- change_colnames_county(c_4bed)
c_5bed_plus_edited <- change_colnames_county(c_5bed_plus)
c_studio_edited <- change_colnames_county(c_studio)
c_sfr_edited <- change_colnames_county(c_sfr)
c_duplex_triplex_edited <- change_colnames_county(c_duplex_triplex)
c_condo_coop_edited <- change_colnames_county(c_condo_coop)
ncol(change_colnames(c_1bed))
ncol(change_colnames_county(c_2bed))
ncol(change_colnames_county(c_3bed))
ncol(change_colnames_county(c_4bed))
ncol(change_colnames_county(c_5bed_plus))
ncol(change_colnames_county(c_studio))
ncol(change_colnames_county(c_sfr))
ncol(change_colnames_county(c_duplex_triplex))
ncol(change_colnames_county(c_condo_coop))
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
View(county_data)
#------------------------------------------------------------------
my_server <- function(input, output){
}
library(dplyr)
library(shiny)
library(ggplot2)
library(tidyr)
#----------------joining data frames------------------------------
change_colnames_county <- function(df){
colnames(df)[7:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
c_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
c_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_3bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_4bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_5bed_plus <- read.csv("data/County_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
c_studio <- read.csv("data/County_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
c_sfr <- read.csv("data/County_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
c_duplex_triplex <- read.csv("data/County_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
c_condo_coop <- read.csv("data/County_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
c_1bed_edited <- change_colnames(c_1bed)
c_2bed_edited <- change_colnames_county(c_2bed)
c_3bed_edited <- change_colnames_county(c_3bed)
c_4bed_edited <- change_colnames_county(c_4bed)
c_5bed_plus_edited <- change_colnames_county(c_5bed_plus)
c_studio_edited <- change_colnames_county(c_studio)
c_sfr_edited <- change_colnames_county(c_sfr)
c_duplex_triplex_edited <- change_colnames_county(c_duplex_triplex)
c_condo_coop_edited <- change_colnames_county(c_condo_coop)
ncol(change_colnames(c_1bed))
ncol(change_colnames_county(c_2bed))
ncol(change_colnames_county(c_3bed))
ncol(change_colnames_county(c_4bed))
ncol(change_colnames_county(c_5bed_plus))
ncol(change_colnames_county(c_studio))
ncol(change_colnames_county(c_sfr))
ncol(change_colnames_county(c_duplex_triplex))
ncol(change_colnames_county(c_condo_coop))
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
View(county_data)
#------------------------------------------------------------------
my_server <- function(input, output){
}
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
options(scipen = 999)
page_one <- tabPanel("Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!"),
textOutput("raph_Demonstration"))
page_two <- tabPanel("Table Graph",
textOutput(outputId = "lel"),
textOutput("graph_Demonstration"))
page_three <- tabPanel("Table Graph",
textOutput("table_Demonstration"))
page_four <- tabPanel("Table Graph",
textOutput("table_Demonstration"))
page_five <- tabPanel("Table Graph",
textOutput("table_Demonstration"))
=======
<<<<<<< HEAD
lel")
myvar <- 201
print(myvar)
hometown <- "Foster City"
hometown <- "Foster City"
# Assign your name to the variable `my_name`
my_name <- "Matthew"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
puppy_price <- 500
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 500
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- TRUE if (total_cost>1000)
if (total_cost>1000){
too_expensive <- TRUE
}
if (total_cost<1000){
too_expensive <- FALSE
}
max_puppies <- 2
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr()
intro <- substr(lyric, 1, 13)
intro
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
fruits
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub()
gsub("a", "ee", fruits)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("o", "o", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
lyric_e
?paste()
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
install.packages("stringr")
library("stringr")
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number){
number+3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches){
(feet*12+inches)*0.0254
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
v1 <- c(1, 2,3)
v1
v2 <- c(2, 3, 4)
v3 <- v1 + v2
# Create a variable `my_name` that contains your name
my_name <- "Matthew Young"
# Create a variable `my_name` that contains your name
my_name <- "Matthew Young"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length = nchar(my_name)
# Print the number of letters in your name
print name_length
# Print the number of letters in your name
print (name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- past(my_name, "is programming")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 12
fav_2 <- 50
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("james", "victoria")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("james", "victoria")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n+1)f
# Add 1 to each element in `n` and print the result
print(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- 10:1
# Subtract `m` FROM `n`. Note the recycling!
n-m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave*cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2,5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1:100
# Create a vector `even` that holds the even numbers from 1 to 100
numbers <- 1:100
even <- numbers %2 == 0
evens <- numbers % 2 == 0
evens <- numbers %% 2 == 0
even <- numbers[evens]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phon_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers <= 5
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers > 5
large <- phone_numbers[large]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
larger_than_5 <- phone_numbers > 5
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(fixed>5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers>5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 ==1] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Betsutenjin"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals
$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals[["dinner"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"]["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast","lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast","lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lappy(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, "length()")
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_items <- lapply(meals, length)
append(vector, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
=======
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices,
is.vector(choices))
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one"), textOutput("plot_text"))
)
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
textOutput("graph_Demonstration"),
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices,
is.vector(choices))
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one"), textOutput("plot_text"))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
new_df <- combined_df[, input$type_of_choices]
new_df <- combined_df[, type_of_choices]
runApp()
runApp()
runApp()
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]))
index <- index + 1
>>>>>>> 1020ccf083e4d5cdd482a2ae0cd564e9ce0b37d5
}
mean_plot
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
color_type <- c("cornsilk1", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "lightgrey",
"purple1", "aquamarine1", "firebrick2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c("gray16", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "sienna3",
"purple1", "aquamarine1", "firebrick2")
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices)
),
## Output: Tabset with plot
mainPanel("Plot", plotOutput(outputId = "plot_one"), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"National Map"
)
page_four <- tabPanel(
"State Map"
)
page_five <- tabPanel(
"Table Graph"
)
# UI Section
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
# Server Section
my_server <- function(input, output) {
output$plot_one <- renderPlotly({
if(!is.null(input$type)) {
cleaned_df <- combined_df[, c("Year", input$type)]
mean_plot <- plot_one_function(cleaned_df, input$type)
mean_plot <- mean_plot + labs(
title = "Years versus Types of houses",
x = "Months(from 2010.02 - 2019.01)",
y = "Types"
) +
theme(axis.title = element_text(size = 12),
axis.text.x=element_blank())
mean_plot
}
})
}
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]),
color = color_type[index])
index <- index + 1
}
mean_plot
}
shinyApp(ui = my_ui, server = my_server)
library(dplyr)
<<<<<<< HEAD
base_uri <- "https://api.propublica.org/congress/v1"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
propublica_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
library(jsonlite)
library(httr)
source("apikeys.R")
library(httr)
library(jsonlite)
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3/search?search=dogs")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri, key = api_key)
body <- fromJSON(response, "text")
response <- GET(base_uri, key = api_key)
body <- content(response, "text")
data <- fromJSON(body)
View(body)
View(data)
param <- list(key = api_key)
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list("key" = api_key, "part" = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list(key = api_key, part = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/search?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54
&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
house_listings <- read.csv("data/Metro_MedianListingPrie_AllHomes.csv", stringsAsFactors = FALSE)
shiny::runApp('C:/Users/ymatt/Documents/final_project')
library(dplyr)
library(shiny)
library(ggplot2)
library(tidyr)
source("my_ui.R")
source("my_server.R")
setwd("C:/Users/ymatt/Documents/final_project")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
my_server <- function(input, output){
output$random <- renderPlot({
ggplot(data = state_data) +
geom_point(mapping = aes(x = RegionName, y = SizeRank))
})
output$lel <- renderText({
"mufugga"
})
}
=======
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c("gray16", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "sienna3",
"purple1", "aquamarine1", "firebrick2")
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices)
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one", height = 400), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"National Map"
)
page_four <- tabPanel(
"State Map"
)
page_five <- tabPanel(
"Table Graph"
)
# UI Section
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
# Server Section
my_server <- function(input, output) {
output$plot_one <- renderPlotly({
if(!is.null(input$type)) {
cleaned_df <- combined_df[, c("Year", input$type)]
mean_plot <- plot_one_function(cleaned_df, input$type)
mean_plot <- mean_plot + labs(
title = "Years versus Types of houses",
x = "Months(from 2010.02 - 2019.01)",
y = "Types"
) +
theme(axis.title = element_text(size = 12),
axis.text.x=element_blank())
mean_plot
}
})
}
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]),
color = color_type[index])
index <- index + 1
}
mean_plot
}
shinyApp(ui = my_ui, server = my_server)
runApp()
match("gray16", color_type)
runApp()
runApp()
match(color_type[1], color_type)
is.numeric(match(color_type[1], color_type))
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c("gray16", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "sienna3",
"purple1", "aquamarine1", "firebrick2")
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices)
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one", height = "300%"), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"National Map"
)
page_four <- tabPanel(
"State Map"
)
page_five <- tabPanel(
"Table Graph"
)
# UI Section
>>>>>>> 1020ccf083e4d5cdd482a2ae0cd564e9ce0b37d5
>>>>>>> e4860a4693dea2e0da7039da1e9a3f2e4b0f5aa1
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
<<<<<<< HEAD
library(dplyr)
library(shiny)
library(ggplot2)
library(tidyr)
#----------------joining data frames------------------------------
change_colnames_county <- function(df){
colnames(df)[7:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
c_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
c_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_3bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_4bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_5bed_plus <- read.csv("data/County_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
c_studio <- read.csv("data/County_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
c_sfr <- read.csv("data/County_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
c_duplex_triplex <- read.csv("data/County_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
c_condo_coop <- read.csv("data/County_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
c_1bed_edited <- change_colnames(c_1bed)
c_2bed_edited <- change_colnames_county(c_2bed)
c_3bed_edited <- change_colnames_county(c_3bed)
c_4bed_edited <- change_colnames_county(c_4bed)
c_5bed_plus_edited <- change_colnames_county(c_5bed_plus)
c_studio_edited <- change_colnames_county(c_studio)
c_sfr_edited <- change_colnames_county(c_sfr)
c_duplex_triplex_edited <- change_colnames_county(c_duplex_triplex)
c_condo_coop_edited <- change_colnames_county(c_condo_coop)
ncol(change_colnames(c_1bed))
ncol(change_colnames_county(c_2bed))
ncol(change_colnames_county(c_3bed))
ncol(change_colnames_county(c_4bed))
ncol(change_colnames_county(c_5bed_plus))
ncol(change_colnames_county(c_studio))
ncol(change_colnames_county(c_sfr))
ncol(change_colnames_county(c_duplex_triplex))
ncol(change_colnames_county(c_condo_coop))
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
View(county_data)
#------------------------------------------------------------------
my_server <- function(input, output){
}
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
library(dplyr)
library(shiny)
library(ggplot2)
library(tidyr)
change_colnames_county <- function(df){
colnames(df)[7:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
c_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
c_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_3bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_4bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_5bed_plus <- read.csv("data/County_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
c_studio <- read.csv("data/County_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
c_sfr <- read.csv("data/County_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
c_duplex_triplex <- read.csv("data/County_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
c_condo_coop <- read.csv("data/County_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
c_1bed_edited <- change_colnames(c_1bed)
c_2bed_edited <- change_colnames_county(c_2bed)
c_3bed_edited <- change_colnames_county(c_3bed)
c_4bed_edited <- change_colnames_county(c_4bed)
c_5bed_plus_edited <- change_colnames_county(c_5bed_plus)
c_studio_edited <- change_colnames_county(c_studio)
c_sfr_edited <- change_colnames_county(c_sfr)
c_duplex_triplex_edited <- change_colnames_county(c_duplex_triplex)
c_condo_coop_edited <- change_colnames_county(c_condo_coop)
ncol(change_colnames(c_1bed))
ncol(change_colnames_county(c_2bed))
ncol(change_colnames_county(c_3bed))
ncol(change_colnames_county(c_4bed))
ncol(change_colnames_county(c_5bed_plus))
ncol(change_colnames_county(c_studio))
ncol(change_colnames_county(c_sfr))
ncol(change_colnames_county(c_duplex_triplex))
ncol(change_colnames_county(c_condo_coop))
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
View(county_data)
#------------------------------------------------------------------
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
c_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
c_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_3bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_4bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_5bed_plus <- read.csv("data/County_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
c_studio <- read.csv("data/County_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
c_sfr <- read.csv("data/County_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
c_duplex_triplex <- read.csv("data/County_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
c_condo_coop <- read.csv("data/County_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
c_1bed_edited <- change_colnames(c_1bed)
c_2bed_edited <- change_colnames_county(c_2bed)
#----------------joining data frames------------------------------
change_colnames_county <- function(df){
colnames(df)[7:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
c_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
c_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_3bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_4bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_5bed_plus <- read.csv("data/County_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
c_studio <- read.csv("data/County_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
c_sfr <- read.csv("data/County_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
c_duplex_triplex <- read.csv("data/County_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
c_condo_coop <- read.csv("data/County_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
c_1bed_edited <- change_colnames(c_1bed)
=======
<<<<<<< HEAD
=======
# Server Section
my_server <- function(input, output) {
output$plot_one <- renderPlotly({
if(!is.null(input$type)) {
cleaned_df <- combined_df[, c("Year", input$type)]
mean_plot <- plot_one_function(cleaned_df, input$type)
mean_plot <- mean_plot + labs(
title = "Years versus Types of houses",
x = "Months(from 2010.02 - 2019.01)",
y = "Types"
) +
theme(axis.title = element_text(size = 12),
axis.text.x=element_blank())
mean_plot
}
})
}
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
mean_plot
}
(match(color_type[1], color_type))
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/pguan/info201/assignment/final_project")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
source("my_ui.R")
source("my_server.R")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
>>>>>>> e4860a4693dea2e0da7039da1e9a3f2e4b0f5aa1
runApp()
source("my_ui.R")
source("my_server.R")
>>>>>>> 1020ccf083e4d5cdd482a2ae0cd564e9ce0b37d5
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
page_four <- tabPanel("County Level Map",
sidebarLayout(
sidebarPanel(
radioButtons("house_type_county_map", "Choose a house type to observe:", c("1-Bed", "2-Bed", "3-Bed", "4-Bed", "5-Bed+", "Condo/Co-op", "Duplex/Triplex", "Single Family Residence (SFR)", "Studio")),
selectInput("state_selector", "Choose a state to observe:", county_data$RegionName)
),
mainPanel(
plotOutput(outputId = "county_level_state_map")
)
)
)
runApp()
runApp()
runApp()
View(state_data)
View(state_data)
counties <- map_data("county")
usa <- map_data("state")
counties <- map_data("county")
# get state (california)
my_us_state <- usa %>%
filter(region == "california")
my_county <- counties %>%
filter(region == "california")
# plot the shit
state_base <- ggplot(data = my_us_state, mapping = aes(x = long, y = lat, group = group)) +
coord_quickmap() +
geom_polygon(color = "black", fill = "gray") +
theme_void() +
geom_polygon(data = my_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)
state_base
runApp()
runApp()
runApp()
runApp()
my_county <- counties %>%
filter(region == "california")
View(my_county)
my_house_type <- county_data %>%
select(RegionName, studio_2019.01)
lowerCase("HI")
tolower("YEet")
my_house_type$RegionName <- tolower(my_house_type$RegionName)
my_house_type
remove("phelps county", "county")
str_remove("phelps county", "county")
str_replace("phelps county", "county", "")
gsub("^.*?_","_","ATGAS_1121")
gsub("county", "", "phelps county")
gsub(" county", "", "phelps county")
my_house_type$RegionName <- gsub(" county", "", my_house_type$RegionName)
my_house_type
my_house_type <- county_data %>%
select(RegionName, studio_2018.04)
my_house_type$RegionName <- tolower(my_house_type$RegionName)
my_house_type$RegionName <- gsub(" county", "", my_house_type$RegionName)
my_house_type
my_house_type <- county_data %>%
select(RegionName, sfr_2018.06)
my_house_type$RegionName <- tolower(my_house_type$RegionName)
my_house_type$RegionName <- gsub(" county", "", my_house_type$RegionName)
my_house_type
View(s_5bed_plus)
View(c_sfr_edited)
source('~/Desktop/final_project/my_server.R', echo=TRUE)
county_data %>%
select(RegionName, sfr_2018.06)
View(county_data %>%
select(RegionName, sfr_2018.06))
View(county_data %>%
select(RegionName, sfr_2018.10))
View(county_data %>%
select(RegionName, sfr_2019.1))
View(county_data %>%
select(RegionName, sfr_2019.01))
my_house_type <- county_data %>%
select(RegionName, sfr_2018.06)
View(my_house_type)
my_house_type <- county_data %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
View(c_sfr_edited)
View(filter(c_sfr_edited, State == "CA"))
my_house_type <- c_sfr_edited %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
my_house_type <- c_sfr_edited %>%
filter(State == "CA") %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
write.csv(county_data, "county_data.csv")
write.csv(filter(county_data, State = "CA"), "california_data.csv")
write.csv(filter(county_data, State == "CA"), "california_data.csv")
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- left_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
write.csv(filter(county_data, State == "CA"), "california_data.csv")
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
View(my_house_type)
my_house_type <- c_sfr_edited %>%
filter(State == "CA") %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
ncol(county_data)
my_house_type <- c_sfr_edited %>%
filter(State == "CA") %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
my_house_type <- c_sfr_edited %>%
filter(State == "CA") %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
write.csv(county_data, "county_data.csv")
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, sfr_2019.01)
View(my_house_type)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `3`bed_2019.01)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, "`3`bed_2019.01")
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `3bed_2019.01`)
View(my_house_type)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `1bed_2010.02`)
View(my_house_type)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `1bed_2018.07`)
View(my_house_type)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `sfr_2019.01`)
View(my_house_type)
my_house_type <- c_sfr_edited %>%
filter(State == "CA") %>%
select(RegionName, `sfr_2019.01`)
View(my_house_type)
nrow(change_colnames_county(c_1bed))
nrow(change_colnames_county(c_2bed))
nrow(change_colnames_county(c_3bed))
nrow(change_colnames_county(c_4bed))
nrow(change_colnames_county(c_5bed_plus))
nrow(change_colnames_county(c_studio))
nrow(change_colnames_county(c_sfr))
nrow(change_colnames_county(c_duplex_triplex))
nrow(change_colnames_county(c_condo_coop))
county_data <- full_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
write.csv(county_data, "county_data.csv")
my_house_type <- c_sfr_edited %>%
filter(State == "CA") %>%
select(RegionName, `sfr_2019.01`)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `sfr_2019.01`)
View(my_house_type)
county_data <- full_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
county_data <- full_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
county_data <- full_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
county_data <- full_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
county_data <- full_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
county_data <- full_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
county_data <- full_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
county_data <- full_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = TRUE)
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `sfr_2019.01`)
View(my_house_type)
county_data <- full_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
c_1bed_edited <- change_colnames_county(c_1bed)
c_2bed_edited <- change_colnames_county(c_2bed)
c_3bed_edited <- change_colnames_county(c_3bed)
c_4bed_edited <- change_colnames_county(c_4bed)
c_5bed_plus_edited <- change_colnames_county(c_5bed_plus)
c_studio_edited <- change_colnames_county(c_studio)
c_sfr_edited <- change_colnames_county(c_sfr)
c_duplex_triplex_edited <- change_colnames_county(c_duplex_triplex)
c_condo_coop_edited <- change_colnames_county(c_condo_coop)
my_house_type <- c_sfr_edited %>%
filter(State == "CA") %>%
select(RegionName, `sfr_2019.01`)
View(my_house_type)
county_data <- full_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
View(county_data)
View(c_1bed_edited)
county_data <- full_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
county_data <- full_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"), na.rm = FALSE)
nrow(change_colnames_county(c_1bed))
nrow(change_colnames_county(c_2bed))
nrow(change_colnames_county(c_3bed))
nrow(change_colnames_county(c_4bed))
nrow(change_colnames_county(c_5bed_plus))
nrow(change_colnames_county(c_studio))
nrow(change_colnames_county(c_sfr))
nrow(change_colnames_county(c_duplex_triplex))
nrow(change_colnames_county(c_condo_coop))
nrow(county_data)
nrow(change_colnames_county(c_1bed)) +
nrow(change_colnames_county(c_2bed)) +
nrow(change_colnames_county(c_3bed)) +
nrow(change_colnames_county(c_4bed)) +
nrow(change_colnames_county(c_5bed_plus)) +
nrow(change_colnames_county(c_studio)) +
nrow(change_colnames_county(c_sfr)) +
nrow(change_colnames_county(c_duplex_triplex)) +
nrow(change_colnames_county(c_condo_coop))
my_house_type <- county_data %>%
filter(State == "CA") %>%
select(RegionName, `sfr_2019.01`)
View(my_house_type)
county_data <- full_join(c_1bed_edited, c_2bed_edited, by = c("RegionName"), na.rm = FALSE)
county_data <- full_join(county_data, c_3bed_edited, by = c("RegionName"), na.rm = FALSE)
county_data <- full_join(county_data, c_4bed_edited, by = c("RegionName"), na.rm = FALSE)
county_data <- full_join(county_data, c_5bed_plus_edited, by = c("RegionName"), na.rm = FALSE)
county_data <- full_join(county_data, c_studio_edited, by = c("RegionName"), na.rm = FALSE)
county_data <- full_join(county_data, c_sfr_edited, by = c("RegionName"), na.rm = FALSE)
county_data <- full_join(county_data, c_duplex_triplex_edited, by = c("RegionName"), na.rm = FALSE)
county_data <- full_join(county_data, c_condo_coop_edited, by = c("RegionName"), na.rm = FALSE)
View(head(county_data, 100))
=======
<<<<<<< HEAD
library(maps)
usa <- map_data("state")
view(usa)
View(usa)
=======
runApp()
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
>>>>>>> 1020ccf083e4d5cdd482a2ae0cd564e9ce0b37d5
>>>>>>> e4860a4693dea2e0da7039da1e9a3f2e4b0f5aa1
