# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers>5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 ==1] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Betsutenjin"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals
$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals[["dinner"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"]["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast","lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast","lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lappy(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, "length()")
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_items <- lapply(meals, length)
append(vector, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
## install.packages("styler")
## library("styler")
#################
#### PART 1 #####
#################
# install.packages("stringr")
# library(stringr)
my_age <- 21
my_name <- "Matthew Young"
# takes in a name and age and returns a string including them both
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Hunger Games", "The City of Ember", "Frozen Solid", "Fableahaven", "An Inconvenient Truth", "Harry Potter")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
books[1]
# takes in a vector and and index and deletes the element at the given index
remove_book <- function(titles, index) {
titles[-index]
}
books_without_four <- remove_book(books, 4)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019/March/16", format = "%Y/%B/%d")
Sys.Date()
today <- Sys.Date()
spring_break - today
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list("Matt" = as.Date("1997/04/05", format = "%Y/%m/%d"), "Deb" = as.Date("1956/08/24", format = "%Y/%m/%d"), "Jeff" = as.Date("1951/09/05", format = "%Y/%m/%d"))
parent_bday <- format(birthdays[["Jeff"]], "%m/%d")
print(parent_bday)
birthdays_2019 <- lapply(lapply(birthdays, format, "2019/%m/%d"), as.Date, format = "%Y/%m/%d")
print(birthdays_2019)
# takes in a date and returns boolean true if the passed date has passed, false otherwise
date_has_passed <- function(date) {
bool <- date - Sys.Date() < 0
bool
}
date_has_passed(birthdays[["Jeff"]])
print(date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d")))
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", date - Sys.Date(), " days.", sep = "")
}
}
make_birthday_announcement("Matt", as.Date("2019/01/03", format = "%Y/%m/%d"))
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", bday - Sys.Date(), " days.", sep = "")
}
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
styler:::style_active_file()
print("Hi Jason :)")
print("Jason what year are you?")
print("Hi there :)")
library(httr)
library(jsonlite)
library(dplyr)
base_uri <- "https://api.propublica.org/congress/v1"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
propublica_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
library(jsonlite)
library(httr)
source("apikeys.R")
library(httr)
library(jsonlite)
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3/search?search=dogs")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri, key = api_key)
body <- fromJSON(response, "text")
response <- GET(base_uri, key = api_key)
body <- content(response, "text")
data <- fromJSON(body)
View(body)
View(data)
param <- list(key = api_key)
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list("key" = api_key, "part" = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list(key = api_key, part = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/search?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54
&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
house_listings <- read.csv("data/Metro_MedianListingPrie_AllHomes.csv", stringsAsFactors = FALSE)
library(plotly)
shiny::runApp('C:/Users/ymatt/Documents/final_project')
runApp('C:/Users/ymatt/Documents/final_project')
runApp('C:/Users/ymatt/Documents/final_project')
runApp('C:/Users/ymatt/Documents/final_project')
source("my_ui.R")
source("my_server.R")
setwd("C:/Users/ymatt/Documents/final_project")
source("my_ui.R")
source("my_server.R")
runApp()
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
usa <- map_data("state", "usa")
usa <- map_data("state")
runApp()
runApp()
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_ly(
state_map_data, type = 'choropleth', locationmode = `USA-states`
) %>%
layout (geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_ly(
state_map_data, type = 'choropleth', locationmode = "USA-states"
) %>%
layout (geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_ly(
state_map_data, type = 'choropleth', locationmode = "USA-states"
) %>%
layout (geo = g)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test <- state_map_data %>%
mutate(
interval = cut(two_bed_2019.01, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
)
my_labels <- c("0-500", "500-1000", "1000-1500", "1500-2000", "2000-2500", "2500-3000", "3000-3500", "3500+")
test <- state_map_data %>%
mutate(
interval = cut(two_bed_2019.01, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
)
colors <- c("#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837")
my_server <- function(input, output, session){
output$country_map <- renderPlot({
ggplot(state_map_data) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = paste0(input$house_type, "_2019.01")),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
scale_fill_manual(paste0(input$house-type, "_2019.01") = colors)
})
}
runApp()
runApp()
runApp()
test <- state_map_data %>%
mutate(
interval = cut(two_bed_2019.01, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
)
colors <- c("#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837")
my_server <- function(input, output, session){
output$country_map <- renderPlot({
ggplot(test) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = interval),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_fill_manual(values = colors)
})
}
runApp()
runApp()
colors <- c("#1b7837", "#5aae61", "#a6dba0", "#d9f0d3", "#e7d4e8", "#c2a5cf", "#9970ab", "#762a83")
my_server <- function(input, output, session){
output$country_map <- renderPlot({
ggplot(test) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = "interval"),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_fill_manual(values = colors)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
View(test)
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
state_map_data
View(state_map_data)
runApp()
runApp()
interval_vec = cut(state_map_data$one_bed_2010.03, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
test <- state_map_data %>%
mutate(
interval = interval_vec
)
test$interval
interval_vec = cut(state_map_data$"one_bed_2010.03", breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval_vecc = cut(state_map_data$"one_bed_2010.03", breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval_vecc
get_interval <- function(house_type) {
interval = cut(state_map_data$house_type, breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval
}
get_interval("one_bed_2019.01")
get_interval("one_bed_2019.01")
get_interval <- function(house_type) {
interval = cut(unlist(state_map_data[,house_type]), breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500, Inf), labels = my_labels)
interval
}
get_interval("one_bed_2019.01")
xixxii <- get_interval("one_bed_2019.01")
xixxii
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
colors <- c(my_labels = c("#1b7837", "#5aae61", "#a6dba0", "#d9f0d3", "#e7d4e8", "#c2a5cf", "#9970ab", "#762a83", na.value = "black"))
runApp()
runApp()
runApp()
runApp()
colorsss <- c(my_labels[1] = "#1b7837")
colorsss <- c("0-500" = "#1b7837")
runApp()
runApp()
runApp()
runApp()
colors <- c("#1b7837","#5aae61", "#a6dba0", "#d9f0d3", "#e7d4e8", "#c2a5cf", "#9970ab", "#762a83")
runApp()
colors <- c("#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#b10026")
runApp()
my_labels <- c("0-500", "500-1000", "1000-1500", "1500-2000", "2000-2500", "2500-3000", "3000-3500")
get_interval <- function(house_type) {
interval = cut(unlist(state_map_data[,house_type]), breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500), labels = my_labels)
interval
}
colors <- c( "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#b10026")
runApp()
my_server <- function(input, output){
output$country_map <- renderPlot({
df <- state_map_data %>%
mutate(
interval = get_interval(input$house_type)
)
ggplot(df) +
geom_polygon(
mapping = aes_string(x = "long", y = "lat", group = "group", fill = "interval"),
color = "black",
size = .1
) +
coord_map() +
labs(fill = "Rent")+
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_fill_manual(values = colors, na.value = "grey")
})
}
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
runApp()
runApp()
runApp()
runApp()
