names <- c("james", "victoria")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n+1)f
# Add 1 to each element in `n` and print the result
print(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- 10:1
# Subtract `m` FROM `n`. Note the recycling!
n-m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave*cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2,5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1:100
# Create a vector `even` that holds the even numbers from 1 to 100
numbers <- 1:100
even <- numbers %2 == 0
evens <- numbers % 2 == 0
evens <- numbers %% 2 == 0
even <- numbers[evens]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phon_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers <= 5
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers > 5
large <- phone_numbers[large]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
larger_than_5 <- phone_numbers > 5
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(fixed>5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers>5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 ==1] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Betsutenjin"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals
$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals[["dinner"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"]["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast","lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast","lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lappy(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, "length()")
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_items <- lapply(meals, length)
append(vector, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
## install.packages("styler")
## library("styler")
#################
#### PART 1 #####
#################
# install.packages("stringr")
# library(stringr)
my_age <- 21
my_name <- "Matthew Young"
# takes in a name and age and returns a string including them both
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Hunger Games", "The City of Ember", "Frozen Solid", "Fableahaven", "An Inconvenient Truth", "Harry Potter")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
books[1]
# takes in a vector and and index and deletes the element at the given index
remove_book <- function(titles, index) {
titles[-index]
}
books_without_four <- remove_book(books, 4)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019/March/16", format = "%Y/%B/%d")
Sys.Date()
today <- Sys.Date()
spring_break - today
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list("Matt" = as.Date("1997/04/05", format = "%Y/%m/%d"), "Deb" = as.Date("1956/08/24", format = "%Y/%m/%d"), "Jeff" = as.Date("1951/09/05", format = "%Y/%m/%d"))
parent_bday <- format(birthdays[["Jeff"]], "%m/%d")
print(parent_bday)
birthdays_2019 <- lapply(lapply(birthdays, format, "2019/%m/%d"), as.Date, format = "%Y/%m/%d")
print(birthdays_2019)
# takes in a date and returns boolean true if the passed date has passed, false otherwise
date_has_passed <- function(date) {
bool <- date - Sys.Date() < 0
bool
}
date_has_passed(birthdays[["Jeff"]])
print(date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d")))
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", date - Sys.Date(), " days.", sep = "")
}
}
make_birthday_announcement("Matt", as.Date("2019/01/03", format = "%Y/%m/%d"))
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", bday - Sys.Date(), " days.", sep = "")
}
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
styler:::style_active_file()
print("Hi Jason :)")
print("Jason what year are you?")
print("Hi there :)")
library(httr)
library(jsonlite)
library(dplyr)
base_uri <- "https://api.propublica.org/congress/v1"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
propublica_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
library(jsonlite)
library(httr)
source("apikeys.R")
library(httr)
library(jsonlite)
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3/search?search=dogs")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri, key = api_key)
body <- fromJSON(response, "text")
response <- GET(base_uri, key = api_key)
body <- content(response, "text")
data <- fromJSON(body)
View(body)
View(data)
param <- list(key = api_key)
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list("key" = api_key, "part" = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list(key = api_key, part = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/search?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54
&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
house_listings <- read.csv("data/Metro_MedianListingPrie_AllHomes.csv", stringsAsFactors = FALSE)
shiny::runApp('C:/Users/ymatt/Documents/final_project')
install.packages("plotly")
runApp('C:/Users/ymatt/Documents/final_project')
runApp('C:/Users/ymatt/Documents/info201hws/a8-data-app-TheToastyNinja')
County_1bed <- read.csv("County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
County_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
setwd("C:/Users/ymatt/Documents/final_project")
County_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
is.data.frame(County_1bed)
County_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
change_colnames <- function(df){
colnames(df)[3:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),9, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[3:length(colnames(df))], 2, nchar(colnames(df)[3:length(colnames(df))])))
df
}
change_colnames(County_1bed)
change_colnames <- function(df){
colnames(df)[3:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),7, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[3:length(colnames(df))], 2, nchar(colnames(df)[3:length(colnames(df))])))
df
}
change_colnames(County_1bed)
change_colnames <- function(df){
colnames(df)[3:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),8, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[3:length(colnames(df))], 2, nchar(colnames(df)[3:length(colnames(df))])))
df
}
change_colnames(County_1bed)
change_colnames <- function(df){
colnames(df)[3:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[3:length(colnames(df))], 2, nchar(colnames(df)[3:length(colnames(df))])))
df
}
c_1bed <- read.csv("data/County_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
c_2bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_3bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_4bed <- read.csv("data/County_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
c_5bed_plus <- read.csv("data/County_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
c_studio <- read.csv("data/County_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
c_sfr <- read.csv("data/County_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
c_duplex_triplex <- read.csv("data/County_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
c_condo_coop <- read.csv("data/County_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
County_data <- left_join(c_1bed, c_2bed, c_3bed, c_4bed, c_5bed_plus, c_studio, c_sfr, c_duplex_triplex, c_condo_coop, by = "RegionName")
?left_join
change_colnames(c_1bed)
change_colnames(c_2bed)
change_colnames(c_3bed)
change_colnames(c_4bed)
change_colnames(c_5bed_plus)
change_colnames(c_studio)
change_colnames(c_sfr)
change_colnames(c_duplex_triplex)
change_colnames(c_condo_coop)
View(change_colnames(c_1bed))
change_colnames <- function(df){
colnames(df)[3:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),9, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
change_colnames <- function(df){
colnames(df)[3:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
View(change_colnames(c_1bed))
change_colnames <- function(df){
colnames(df)[7:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
change_colnames <- function(df){
colnames(df)[7:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
View(change_colnames(c_1bed))
change_colnames_county <- function(df){
colnames(df)[7:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[7:length(colnames(df))], 2, nchar(colnames(df)[7:length(colnames(df))])))
df
}
View(change_colnames_county(c_5bed_plus))
c_1bed_edited <- change_colnames(c_1bed)
c_2bed_edited <- change_colnames_county(c_2bed)
c_3bed_edited <- change_colnames_county(c_3bed)
c_4bed_edited <- change_colnames_county(c_4bed)
c_5bed_plus_edited <- View(change_colnames_county(c_5bed_plus))
c_5bed_plus_edited <- change_colnames_county(c_5bed_plus)
c_studio_edited <- change_colnames_county(c_studio)
c_sfr_edited <- change_colnames_county(c_sfr)
c_duplex_triplex_edited <- change_colnames_county(c_duplex_triplex)
c_condo_cooop_edited <- change_colnames_county(c_condo_coop)
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = RegionName)
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = "RegionName")
View(county_data)
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro"))
county_data <- left_join(c_1bed_edited, c_2bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
View(county_data)
county_data <- left_join(county_data, c_3bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_4bed_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_5bed_plus_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_studio_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_sfr_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_duplex_triplex_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
county_data <- left_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
c_condo_coop_edited <- change_colnames_county(c_condo_coop)
county_data <- left_join(county_data, c_condo_coop_edited, by = c("RegionName", "State", "Metro", "StateCodeFIPS", "MunicipalCodeFIPS", "SizeRank"))
View(county_data)
ncol(change_colnames(c_1bed))
ncol(change_colnames_county(c_2bed))
ncol(change_colnames_county(c_3bed))
ncol(change_colnames_county(c_4bed))
ncol(change_colnames_county(c_5bed_plus))
ncol(change_colnames_county(c_studio))
ncol(change_colnames_county(c_sfr))
ncol(change_colnames_county(c_duplex_triplex))
ncol(change_colnames_county(c_condo_coop))
change_colnames_state <- function(df){
colnames(df)[3:length(colnames(df))] <- paste0(substr(deparse(substitute(df)),3, nchar(deparse(substitute(df)))), "_", substr(colnames(df)[3:length(colnames(df))], 2, nchar(colnames(df)[3:length(colnames(df))])))
df
}
s_1bed <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = FALSE)
s_2bed <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
s_3bed <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
s_4bed <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = FALSE)
s_5bed_plus <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = FALSE)
s_studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = FALSE)
s_sfr <- read.csv("data/StateMedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
s_duplex_triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
s_sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = FALSE)
s_duplex_triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = FALSE)
s_condo_coop <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = FALSE)
s_1bed_edited <- change_colnames_state(s_1bed)
s_2bed_edited <- change_colnames_state(s_2bed)
s_3bed_edited <- change_colnames_state(s_3bed)
s_4bed_edited <- change_colnames_state(s_4bed)
s_5bed_plus_edited <- change_colnames_state(s_5bed_plus)
s_c_studio_edited <- change_colnames_state(s_studio)
s_sfr_edited <- change_colnames_state(s_sfr)
s_duplex_triplex_edited <- change_colnames_state(s_duplex_triplex)
s_condo_coop_edited <- change_colnames_state(s_condo_coop)
state_data <- left_join(s_1bed_edited, s_2bed_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_3bed_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_4bed_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_5bed_plus_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_studio_edited, by = c("RegionName", "SizeRank"))
s_studio_edited <- change_colnames_state(s_studio)
state_data <- left_join(state_data, s_studio_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_sfr_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_duplex_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_duplex_triplex_edited, by = c("RegionName", "SizeRank"))
state_data <- left_join(state_data, s_condo_coop_edited, by = c("RegionName", "SizeRank"))
View(state_data)
my_ui <- fluidPage(
plotOutput("random"),
titlePanel(strong("Anonymous Penguin")),
tabset_panel <- tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
my_server <- function(input, output){
output$random <- renderPlot(
ggplot(data = state_data)+
geom_point(mapping = aes(x = RegionName, y = SizeRank))
)
}
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(shiny)
library(ggplot2)
library(tidyr)
runApp()
runApp()
runApp()
