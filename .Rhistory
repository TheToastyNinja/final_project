filter(RegionName == state_choices[1])) +
geom_line(mapping = aes(x = "Year", y = type_of_choices[2]))
ggplot(data = combined_state_df %>%
filter(RegionName == state_choices[1])) +
geom_line(mapping = aes_string(x = "Year", y = type_of_choices[2]))
ggplot(data = combined_state_df %>%
filter(RegionName == state_choices[4])) +
geom_line(mapping = aes_string(x = "Year", y = type_of_choices[2]))
sp <- combined_state_df %>%
filter(RegionName == state_choices[4])
View(sp)
ggplot(data = sp) +
geom_line(mapping = aes(x = "Year", y = "one_Bedroom_mean_price"))
ggplot(data = sp) +
geom_line(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_plot(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_plot(mapping = aes(x = Year, y = one_Bedroom_mean_price))
library(leaflet)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
ggplot(data = sp) +
geom_point(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_line(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_smooth(mapping = aes(x = Year, y = one_Bedroom_mean_price))
ggplot(data = sp) +
geom_point(mapping = aes(x = Year, y = one_Bedroom_mean_price)) +
geom_smooth
ggplot(data = sp) +
geom_point(mapping = aes(x = Year, y = one_Bedroom_mean_price))
spp <- sp %>%
mutate(fakeMonth = 1:108)
View(spp)
spp <- sp %>%
mutate(fake_month = 1:108)
ggplot(data = spp) +
geom_point(mapping = aes(x =fake_month, y = one_Bedroom_mean_price))
ggplot(data = spp) +
geom_line(mapping = aes(x =fake_month, y = one_Bedroom_mean_price))
library(shiny)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
sos_df <- filter_for_state(state_choices[1])
View(sos_df)
sos <- draw_lines(sos_df, type_of_choices[1])
sos
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
types <- c(type_of_choices[1], type_of_choices[2])
types
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
color_type <- c(
"gray16", "deepskyblue2", "darkorchid3",
"blue1", "green4", "sienna3",
"violetred", "aquamarine1", "firebrick2"
)
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
sos
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], state_choices)])
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], state_choices)])
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
sos_df
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], state_choices)])
index <- index + 1
}
lines
View(sos_df)
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
View(sos_df)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
geom_line(mapping = aes_string(x = "fake_month", y = types[index]), color = "purple")
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]), color = "purple")
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]), color = "purple")
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[index], type_of_choices)])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[3])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[4])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[5])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[3], type_of_choices)])
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[2], type_of_choices)])
index <- 1
ggplot(data = sos_df) +
geom_line(mapping = aes_string(x = "fake_month", y = types[3]),
color = color_type[match(types[index], type_of_choices)])
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
sos
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
View(sos_df)
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]))
index <- index + 1
}
lines
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
types <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
View(sos_df)
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, type_of_choices[1])
sos
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos <- draw_lines(sos_df, typess)
sos
sos_df <- filter_for_state(state_choices[1])
sos_df <- sos_df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = sos_df)
index <- 1
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
while(index <= length(typess)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = typess[index]),
color = color_type[match(typess[index], type_of_choices)])
index <- index + 1
}
lines
View(sos_df)
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, typess)
sos
filter_for_state <- function(state) {
df <- combined_state_df %>%
filter(RegionName == state) %>%
mutate(
fake_month = 1:108
)
df
}
source('C:/Users/pguan/info201/assignment/final_project/my_server.R', echo=TRUE)
sos_df <- filter_for_state(state_choices[1])
filter_for_state <- function(state) {
df <- combined_state_df %>%
filter(RegionName == state) %>%
mutate(
fake_month = 1:108
)
df
}
draw_lines <- function(df, types) {
data_df <- df %>%
mutate(fake_month = 1:108)
lines <- ggplot(data = data_df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
}
sos_df <- filter_for_state(state_choices[1])
View(sos_df)
draw_lines <- function(df, types) {
lines <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
}
sos <- draw_lines(sos_df, typess)
sos
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, typess)
sos
sos
filter_for_state <- function(state) {
df <- combined_state_df %>%
filter(RegionName == state) %>%
mutate(
fake_month = 1:108
)
df
}
draw_lines <- function(df, types) {
lines <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
lines <- lines +
geom_line(mapping = aes_string(x = "fake_month", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
lines
}
# install.packages("leaflet")
library(leaflet)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c(
"gray16", "deepskyblue2", "darkorchid3",
"blue1", "green4", "sienna3",
"violetred", "aquamarine1", "firebrick2"
)
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
state_choices <- one_Bedroom$RegionName
get_state_df <- function(df, index) {
df <- df %>%
select(-SizeRank) %>%
gather(
key = "Year",
value = types,
-RegionName
)
colnames(df)[3] <- type_of_choices[index]
df
}
combined_state_df <- get_state_df(one_Bedroom, 1) %>%
full_join(get_state_df(two_Bedroom, 2), by = c("Year", "RegionName")) %>%
full_join(get_state_df(three_Bedroom, 3), by = c("Year", "RegionName")) %>%
full_join(get_state_df(four_Bedroom, 4), by = c("Year", "RegionName")) %>%
full_join(get_state_df(five_Bedroom, 5), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Condo_Bedroom, 6), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Duplex_Triplex, 7), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Sfr, 8), by = c("Year", "RegionName")) %>%
full_join(get_state_df(Studio, 9), by = c("Year", "RegionName"))
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!"),
textOutput("graph_Demonstration")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices),
br(),
p(strong("How did the listed price change from year for different types of housings?")),
p("The first visualization is a scattorplot showing how the national market of various types of rental housing have changed over the years. The x_axis represents the timeline from the Freburary of 2010 to the January of 2019. The y-axis represents the listed price. We used the data provided by Zillow to calculate the national average of different type of housings at specific time frames. Users can select mutiple housings from the checkbox to display the desired data on the graph for comparison. The overall market of all housings experienced different levels of decreases in listed price in 2010 and continual but slow increases from 2011 to 2019. The decrease in 2010 might be the result from the 2008 financial crisis. As the economy is recovering, the rental housing market revives. An exception is the five-bedroom homes whose listed price fluctuates over the years. It is not surprising because of its large size causing its demand on the rental market to be unpredictable.")
),
## Output: Tabset with plot
mainPanel(plotlyOutput(outputId = "plot_one", height = "800px"), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"Map",
sidebarLayout(
sidebarPanel(
radioButtons("house_type", "House Type:", c("1-Bed", "2-Bed", "3-Bed", "4-Bed", "5-Bed+", "Condo/Co-op", "Duplex/Triplex", "Single Family Residence (SFR)", "Studio"))
),
mainPanel(
plotOutput(outputId = "country_map")
)
)
)
page_four <- tabPanel("Table Graph")
page_five <- tabPanel(
"Year vs. Prices of various housing of states",
sidebarLayout(
sidebarPanel(
selectInput("states", "State", choices = state_choices, selected = state_choices[1]),
checkboxGroupInput("types", "Type of houses", choices = type_of_choices)
),
mainPanel(
plotlyOutput("draw_lines")
)
)
)
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabset_panel <- tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
sos_df <- filter_for_state(state_choices[1])
sos <- draw_lines(sos_df, typess)
typess <- c(type_of_choices[1], type_of_choices[2], type_of_choices[3])
sos <- draw_lines(sos_df, typess)
sos
sos
sos_df <- filter_for_state(state_choices[50])
sos <- draw_lines(sos_df, typess)
sos
typess <- c(type_of_choices[3], type_of_choices[5], type_of_choices[6])
sos_df <- filter_for_state(state_choices[50])
sos <- draw_lines(sos_df, typess)
sos
runApp()
type_of_choices <- colnames(combined_df)[2:10]
names_of_selection <- substr(type_of_choices, nchar(type_of_choices) - 11, nchar(type_of_choices))
names_of_selection
names_of_selection <- substr(type_of_choices, 1, nchar(type_of_choices) - 11)
names_of_selection
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
colnames(combined_state_df)[3:11] <-names_of_selection
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
sos <- filter_for_state(state_choices[1])
View(sos)
View(combined_state_df)
colnames(combined_state_df)[3:11] <- names_of_selection
View(combined_state_df)
sos <- filter_for_state(state_choices[1])
View(sos)
typesss <- c(names_of_selection[1], names_of_selection[2])
linesss <- draw_lines(sos, typesss)
linesss
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("my_ui.R")
source("my_ui.R")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
