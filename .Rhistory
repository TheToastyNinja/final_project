# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
View(diamonds)
WBI_Forest_Area <- read.csv("data/WBI_Forest_Area_Cleaned.csv")
WBI_Definition <- read.csv("data/WBI_Definition_and_Source.csv")
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
sidebarLayout(
sidebarPanel(
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[, 3],
"GDP (constant 2010 US$)" = WBI_Definition[0, 4],
"Population, total" = WBI_Definition[0, 5],
"Land area (sq. km)" = WBI_Definition[0, 6],
"Agricultural land (% of land area)" = WBI_Definition[0, 7],
"Forest area (% of land area)" = WBI_Definition[0, 8],
"Forest area (sq. km)" = WBI_Definition[0, 9],
"Agricultural land (sq. km)" = WBI_Definition[0, 10])),
br(),
sliderInput("year",
"Year of the observation:",
value = 1998,
min = 1992,
max = 2016)
)
mainPanel()
)
)
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
sidebarLayout(
sidebarPanel(
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[, 3],
"GDP (constant 2010 US$)" = WBI_Definition[0, 4],
"Population, total" = WBI_Definition[0, 5],
"Land area (sq. km)" = WBI_Definition[0, 6],
"Agricultural land (% of land area)" = WBI_Definition[0, 7],
"Forest area (% of land area)" = WBI_Definition[0, 8],
"Forest area (sq. km)" = WBI_Definition[0, 9],
"Agricultural land (sq. km)" = WBI_Definition[0, 10])),
br(),
sliderInput("year",
"Year of the observation:",
value = 1998,
min = 1992,
max = 2016)
)
mainPanel()
)
)
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
sidebarLayout(
sidebarPanel(
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[, 3],
"GDP (constant 2010 US$)" = WBI_Definition[0, 4],
"Population, total" = WBI_Definition[0, 5],
"Land area (sq. km)" = WBI_Definition[0, 6],
"Agricultural land (% of land area)" = WBI_Definition[0, 7],
"Forest area (% of land area)" = WBI_Definition[0, 8],
"Forest area (sq. km)" = WBI_Definition[0, 9],
"Agricultural land (sq. km)" = WBI_Definition[0, 10])),
br(),
sliderInput("year",
"Year of the observation:",
value = 1998,
min = 1992,
max = 2016)
),
mainPanel()
)
)
# Define UI
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
## Sidebar layout with input and output definitions
sidebarLayout(
#Sidebar panel for inputs
sidebarPanel(
# Input: Select the distribution type
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[, 3],
"GDP (constant 2010 US$)" = WBI_Definition[0, 4],
"Population, total" = WBI_Definition[0, 5],
"Land area (sq. km)" = WBI_Definition[0, 6],
"Agricultural land (% of land area)" = WBI_Definition[0, 7],
"Forest area (% of land area)" = WBI_Definition[0, 8],
"Forest area (sq. km)" = WBI_Definition[0, 9],
"Agricultural land (sq. km)" = WBI_Definition[0, 10])),
br(),
#Input: Slider for the year of observations to generate
sliderInput("year",
"Year of the observation:",
value = 1998,
min = 1992,
max = 2016)
),
## Output: Tabset with table and plot
mainPanel(
tabsetPanel(type = "taps",
tabPanel("Table", tableOutput("table")),
tabPanel("Plot", plotOutput("plot"))
)
)
)
)
# Define UI
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
## Sidebar layout with input and output definitions
sidebarLayout(
#Sidebar panel for inputs
sidebarPanel(
# Input: Select the distribution type
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[, 3],
"GDP (constant 2010 US$)" = WBI_Definition[0, 4],
"Population, total" = WBI_Definition[0, 5],
"Land area (sq. km)" = WBI_Definition[0, 6],
"Agricultural land (% of land area)" = WBI_Definition[0, 7],
"Forest area (% of land area)" = WBI_Definition[0, 8],
"Forest area (sq. km)" = WBI_Definition[0, 9],
"Agricultural land (sq. km)" = WBI_Definition[0, 10])),
br(),
#Input: Slider for the year of observations to generate
sliderInput("year",
"Year of the observation:",
value = 1998,
min = 1992,
max = 2016)
),
## Output: Tabset with table and plot
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table")),
tabPanel("Plot", plotOutput("plot"))
)
)
)
)
server <- function(input, output) {
d <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
}
runApp()
# Define UI
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
## Sidebar layout with input and output definitions
sidebarLayout(
#Sidebar panel for inputs
sidebarPanel(
# Input: Select the distribution type
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[, 3],
"GDP (constant 2010 US$)" = WBI_Definition[0, 4],
"Population, total" = WBI_Definition[0, 5],
"Land area (sq. km)" = WBI_Definition[0, 6],
"Agricultural land (% of land area)" = WBI_Definition[0, 7],
"Forest area (% of land area)" = WBI_Definition[0, 8],
"Forest area (sq. km)" = WBI_Definition[0, 9],
"Agricultural land (sq. km)" = WBI_Definition[0, 10])),
br(),
#Input: Slider for the year of observations to generate
sliderInput("year",
"Year of the observation:",
value = c(1992, 2016),
min = 1992,
max = 2016)
),
## Output: Tabset with table and plot
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table")),
tabPanel("Plot", plotOutput("plot"))
)
)
)
)
runApp()
View(WBI_Definition)
runApp()
# Define UI
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
## Sidebar layout with input and output definitions
sidebarLayout(
#Sidebar panel for inputs
sidebarPanel(
# Input: Select the distribution type
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[0, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[0, 3],
"GDP (constant 2010 US$)" = WBI_Definition[0, 4],
"Population, total" = WBI_Definition[0, 5],
"Land area (sq. km)" = WBI_Definition[0, 6],
"Agricultural land (% of land area)" = WBI_Definition[0, 7],
"Forest area (% of land area)" = WBI_Definition[0, 8],
"Forest area (sq. km)" = WBI_Definition[0, 9],
"Agricultural land (sq. km)" = WBI_Definition[0, 10])),
br(),
#Input: Slider for the year of observations to generate
sliderInput("year",
"Year of the observation:",
value = c(1992, 2016),
min = 1992,
max = 2016)
),
## Output: Tabset with table and plot
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table")),
tabPanel("Plot", plotOutput("plot"))
)
)
)
)
runApp()
runApp()
view(WBI_Definition)
View(WBI_Definition)
# Define UI
ui <- fluidPage(
titlePanel("Worldwide Forestation level"),
## Sidebar layout with input and output definitions
sidebarLayout(
#Sidebar panel for inputs
sidebarPanel(
# Input: Select the distribution type
radioButtons("dist", "Distribution type:",
c("CO2 emissions (kt)" = WBI_Definition[1, 2],
"CO2 emissions (metric tons per capita)" = WBI_Definition[2, 2],
"GDP (constant 2010 US$)" = WBI_Definition[3, 2],
"Population, total" = WBI_Definition[4, 2],
"Land area (sq. km)" = WBI_Definition[6, 2],
"Agricultural land (% of land area)" = WBI_Definition[7, 2],
"Forest area (% of land area)" = WBI_Definition[8, 2],
"Forest area (sq. km)" = WBI_Definition[9, 2],
"Agricultural land (sq. km)" = WBI_Definition[10, 2])),
br(),
#Input: Slider for the year of observations to generate
sliderInput("year",
"Year of the observation:",
value = c(1992, 2016),
min = 1992,
max = 2016)
),
## Output: Tabset with table and plot
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table")),
tabPanel("Plot", plotOutput("plot"))
)
)
)
)
runApp()
View(diamonds_sample)
Forest_Area_Population_GDP <- WBI_Forest_Area %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "SP.POP.TOTL" | Series.Code == "NY.GDP.MKTP.KD" | Series.Code == "AG.LND.FRST.ZS") %>%
select(-Country.Name, -Series.Name, -X) %>%
gather(key = year, value = relevant_data, -Series.Code, -Country.Code) %>%
spread(key = Series.Code, value = relevant_data) %>%
mutate(year_modified = substr(year, 3, 6))
Forest_Area_Population_GDP <- WBI_Forest_Area %>%
mutate(year_modified = substr(year, 3, 6))
Forest_Area_Population_GDP <- WBI_Forest_Area %>%
gather(key = year, value = relevant_data, -Series.Code, -Country.Code) %>%
spread(key = Series.Code, value = relevant_data) %>%
mutate(year_modified = substr(year, 3, 6))
WBI_Forest_Area <- read.csv("data/WBI_Forest_Area_Cleaned.csv")
Forest_Area_Population_GDP <- WBI_Forest_Area %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "SP.POP.TOTL" | Series.Code == "NY.GDP.MKTP.KD" | Series.Code == "AG.LND.FRST.ZS") %>%
select(-Country.Name, -Series.Name, -X) %>%
gather(key = year, value = relevant_data, -Series.Code, -Country.Code) %>%
spread(key = Series.Code, value = relevant_data) %>%
mutate(year_modified = substr(year, 3, 6))
library("tidyr")
Forest_Area_Population_GDP <- WBI_Forest_Area %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "SP.POP.TOTL" | Series.Code == "NY.GDP.MKTP.KD" | Series.Code == "AG.LND.FRST.ZS") %>%
select(-Country.Name, -Series.Name, -X) %>%
gather(key = year, value = relevant_data, -Series.Code, -Country.Code) %>%
spread(key = Series.Code, value = relevant_data) %>%
mutate(year_modified = substr(year, 3, 6))
View(Forest_Area_Population_GDP)
runApp()
Forest_Area <- WBI_Forest_Area %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "SP.POP.TOTL" | Series.Code == "NY.GDP.MKTP.KD" | Series.Code == "AG.LND.FRST.ZS") %>%
select(-Country.Name, -Series.Name, -X) %>%
gather(key = year, value = relevant_data, -Series.Code, -Country.Code) %>%
spread(key = Series.Code, value = relevant_data) %>%
mutate(year_modified = substr(year, 3, 6))
year_range <- range(Forest_Area$year_modified)
WBI_Forest_Area <- select(read.csv("data/WBI_Forest_Area_Cleaned.csv"), -1)
WBI_Forest_Area <- read.csv("data/WBI_Forest_Area_Cleaned.csv")
WBI_Forest_Area_modified <- select(WBI_Forest_Area, -1)
View(WBI_Forest_Area_modified)
View(WBI_Definition)
View(Forest_Area_Population_GDP)
View(WBI_Forest_Area)
select_year <- function(input) {
Begin_year <- 5 + input$year[1] - 1992
End_year <- Begin_year + input$year[2] - input$year[1]
WBI_Forest_Area_modified_TWO <- select(WBI_Forest_Area_modified, 1:4, Begin_year:End_year)
WBI_Forest_Area_modified_TWO
}
filter_row <- function(table_modified, feature) {
filtered_row <- filter(table_modified, Series.Name = feature)
filtered_row
}
server <- function(input, output) {
output$table <- renderPlot ({
output_table <- select_year(input)
output_table <- filter_row(output_table, input$dist)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
runApp()
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
runApp()
runApp()
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
runApp()
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui = my_ui, server = my_server)
runApp()
install.packages("plotlyOutput")
install.packages("plotly")
runApp()
distribution_name <- WBI_Definition[ , 2]
distribution_code <- WBI_Definition[ , 1]
# Define server logic
my_server <- function(input, output) {
# Generate a table view of the data
output$table <- renderTable ({
output_table <- select_year(input$year[1], input$year[2])
output_table <- filter_row(output_table, input$dist)
})
# Generate a plot of the data
output$plot <- renderPlotly( {
output_plot <- select_year(input$year[1], input$year[2])
output_plot <- filter_row(output_table, input$dist)
output_plot <- plot_modified(output_table)
# return the plot
ggplot(data = output_plot) +
geom_point(mapping = aes_string(x = "year_fixed", y = input$dist, color = "year_fixed")) +
labs(
title = paste("Years and", distribution_name[which(distribution_code == input$dist)]),
x = "Years",
y = distribution_name[which(distribution_code == input$feature)],
color = "Years"
)
}
)
}
runApp()
runApp()
runApp()
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
runApp()
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
runApp()
runApp()
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
#Sidebar panel for inputs
sidebarPanel(
# Input: Select the distribution type
radioButtons("dist", "Distribution type:", selected = "EN.ATM.CO2E.KT",
choiceNames  = WBI_Definition[,2],
choiceValues = WBI_Definition[,1]),
br(),
#Input: Slider for the year of observations to generate
sliderInput("year",
"Year of the observation:",
value = c(1992, 2016),
min = 1992,
max = 2016)
),
## Output: Tabset with table and plot
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table"), textOutput("table_text")),
tabPanel("Plot", plotlyOutput("plot"), textOutput("plot_text"))
)
)
runApp()
#install.packages("plotly")
library("plotly")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("my_ui.R")
source("my_server.R")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
library("rsconnect")
rsconnect::setAccountInfo(name='sihanlu2013', token='0B54A1D0FCB5ADE952D17347173DAEB1', secret='y59nfP6PAdM7hKai+gb3ufnXIqCEamd/9NvrR3zD')
shiny::runApp()
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
options(scipen = 999)
page_one <- tabPanel("Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!"),
textOutput("graph_Demonstration"))
page_two <- tabPanel("Year vs. Prices of various housings",
textOutput("graph_Demonstration"),
## Sidebar layout with input and output definitions
sidebarLayout(
#Sidebar panel for inputs
sidebarPanel(
#Input: Slider for the year of observations to generate
sliderInput("year_one",
"Year of the observation:",
value = c(2010, 2019),
min = 2010,
max = 2019)
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput("plot_one"), textOutput("plot_text"))
)
)
page_three <- tabPanel("National Map",
textOutput("table_Demonstration"))
page_four <- tabPanel("State Map",
textOutput("table_Demonstration"))
page_five <- tabPanel("Table Graph",
textOutput("table_Demonstration"))
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabset_panel <- tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
runApp('~/Desktop/final_project')
