# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices,
is.vector(choices))
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one"), textOutput("plot_text"))
)
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
textOutput("graph_Demonstration"),
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices,
is.vector(choices))
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one"), textOutput("plot_text"))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
new_df <- combined_df[, input$type_of_choices]
new_df <- combined_df[, type_of_choices]
runApp()
runApp()
runApp()
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]))
index <- index + 1
}
mean_plot
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
color_type <- c("cornsilk1", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "lightgrey",
"purple1", "aquamarine1", "firebrick2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c("gray16", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "sienna3",
"purple1", "aquamarine1", "firebrick2")
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices)
),
## Output: Tabset with plot
mainPanel("Plot", plotOutput(outputId = "plot_one"), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"National Map"
)
page_four <- tabPanel(
"State Map"
)
page_five <- tabPanel(
"Table Graph"
)
# UI Section
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
# Server Section
my_server <- function(input, output) {
output$plot_one <- renderPlotly({
if(!is.null(input$type)) {
cleaned_df <- combined_df[, c("Year", input$type)]
mean_plot <- plot_one_function(cleaned_df, input$type)
mean_plot <- mean_plot + labs(
title = "Years versus Types of houses",
x = "Months(from 2010.02 - 2019.01)",
y = "Types"
) +
theme(axis.title = element_text(size = 12),
axis.text.x=element_blank())
mean_plot
}
})
}
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]),
color = color_type[index])
index <- index + 1
}
mean_plot
}
shinyApp(ui = my_ui, server = my_server)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c("gray16", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "sienna3",
"purple1", "aquamarine1", "firebrick2")
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices)
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one", height = 400), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"National Map"
)
page_four <- tabPanel(
"State Map"
)
page_five <- tabPanel(
"Table Graph"
)
# UI Section
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
# Server Section
my_server <- function(input, output) {
output$plot_one <- renderPlotly({
if(!is.null(input$type)) {
cleaned_df <- combined_df[, c("Year", input$type)]
mean_plot <- plot_one_function(cleaned_df, input$type)
mean_plot <- mean_plot + labs(
title = "Years versus Types of houses",
x = "Months(from 2010.02 - 2019.01)",
y = "Types"
) +
theme(axis.title = element_text(size = 12),
axis.text.x=element_blank())
mean_plot
}
})
}
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]),
color = color_type[index])
index <- index + 1
}
mean_plot
}
shinyApp(ui = my_ui, server = my_server)
runApp()
match("gray16", color_type)
runApp()
runApp()
match(color_type[1], color_type)
is.numeric(match(color_type[1], color_type))
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(plotly)
library(maps)
library(rsconnect)
library(scales)
options(scipen = 999)
one_Bedroom <- read.csv("data/State_MedianRentalPrice_1Bedroom.csv", stringsAsFactors = F)
two_Bedroom <- read.csv("data/State_MedianRentalPrice_2Bedroom.csv", stringsAsFactors = F)
three_Bedroom <- read.csv("data/State_MedianRentalPrice_3Bedroom.csv", stringsAsFactors = F)
four_Bedroom <- read.csv("data/State_MedianRentalPrice_4Bedroom.csv", stringsAsFactors = F)
five_Bedroom <- read.csv("data/State_MedianRentalPrice_5BedroomOrMore.csv", stringsAsFactors = F)
Condo_Bedroom <- read.csv("data/State_MedianRentalPrice_CondoCoop.csv", stringsAsFactors = F)
Duplex_Triplex <- read.csv("data/State_MedianRentalPrice_DuplexTriplex.csv", stringsAsFactors = F)
Sfr <- read.csv("data/State_MedianRentalPrice_Sfr.csv", stringsAsFactors = F)
Studio <- read.csv("data/State_MedianRentalPrice_Studio.csv", stringsAsFactors = F)
get_mean <- function(sample_df) {
length_cols <- length(colnames(sample_df))
Mean <- as.data.frame(mean(unlist(sample_df[, length_cols]), na.rm = T))
colnames(Mean)[1] <- colnames(sample_df)[3]
index <- 4
while (index <= length_cols) {
names_sp <- colnames(sample_df)[index]
Mean <- mutate(Mean,
names = mean(unlist(sample_df[, index]), na.rm = T)
)
colnames(Mean)[index - 2] <- names_sp
index <- index + 1
}
type_name <- paste0(deparse(substitute(sample_df)), "_mean_price")
Mean <- gather(Mean,
key = "Year",
value = type_name
)
colnames(Mean)[2] <- type_name
Mean
}
combined_df <- get_mean(one_Bedroom) %>%
left_join(get_mean(two_Bedroom), by = "Year") %>%
left_join(get_mean(three_Bedroom), by = "Year") %>%
left_join(get_mean(four_Bedroom), by = "Year") %>%
left_join(get_mean(five_Bedroom), by = "Year") %>%
left_join(get_mean(Condo_Bedroom), by = "Year") %>%
left_join(get_mean(Duplex_Triplex), by = "Year") %>%
left_join(get_mean(Sfr), by = "Year") %>%
left_join(get_mean(Studio), by = "Year")
color_type <- c("gray16", "deepskyblue2", "darkorchid3",
"olivedrab2", "cyan2", "sienna3",
"purple1", "aquamarine1", "firebrick2")
combined_df$Year <- substr(combined_df$Year, 2, nchar(combined_df$Year))
type_of_choices <- colnames(combined_df)[2:10]
page_one <- tabPanel(
"Introduction",
textInput("name", "name"),
p(strong("hello guys !!!"), "We are penguins!")
)
page_two <- tabPanel(
"Year vs. Prices of various housings",
## Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the year of observations to generate
checkboxGroupInput("type", "Type of houses", choices = type_of_choices)
),
## Output: Tabset with plot
mainPanel("Plot", plotlyOutput(outputId = "plot_one", height = "300%"), textOutput("plot_text"))
)
)
page_three <- tabPanel(
"National Map"
)
page_four <- tabPanel(
"State Map"
)
page_five <- tabPanel(
"Table Graph"
)
# UI Section
my_ui <- fluidPage(
titlePanel(strong("Anonymous Penguin")),
tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
# Server Section
my_server <- function(input, output) {
output$plot_one <- renderPlotly({
if(!is.null(input$type)) {
cleaned_df <- combined_df[, c("Year", input$type)]
mean_plot <- plot_one_function(cleaned_df, input$type)
mean_plot <- mean_plot + labs(
title = "Years versus Types of houses",
x = "Months(from 2010.02 - 2019.01)",
y = "Types"
) +
theme(axis.title = element_text(size = 12),
axis.text.x=element_blank())
mean_plot
}
})
}
plot_one_function <- function(df, types) {
mean_plot <- ggplot(data = df)
index <- 1
while(index <= length(types)) {
mean_plot <- mean_plot +
geom_point(mapping = aes_string(x = "Year", y = types[index]),
color = color_type[match(types[index], type_of_choices)])
index <- index + 1
}
mean_plot
}
(match(color_type[1], color_type))
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/pguan/info201/assignment/final_project")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
source("my_ui.R")
source("my_server.R")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
runApp()
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
styler:::style_active_file()
