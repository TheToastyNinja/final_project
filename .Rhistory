lel")
myvar <- 201
print(myvar)
hometown <- "Foster City"
hometown <- "Foster City"
# Assign your name to the variable `my_name`
my_name <- "Matthew"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
puppy_price <- 500
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 500
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- TRUE if (total_cost>1000)
if (total_cost>1000){
too_expensive <- TRUE
}
if (total_cost<1000){
too_expensive <- FALSE
}
max_puppies <- 2
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr()
intro <- substr(lyric, 1, 13)
intro
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
fruits
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub()
gsub("a", "ee", fruits)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("o", "o", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
lyric_e
?paste()
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
install.packages("stringr")
library("stringr")
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number){
number+3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches){
(feet*12+inches)*0.0254
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
v1 <- c(1, 2,3)
v1
v2 <- c(2, 3, 4)
v3 <- v1 + v2
# Create a variable `my_name` that contains your name
my_name <- "Matthew Young"
# Create a variable `my_name` that contains your name
my_name <- "Matthew Young"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length = nchar(my_name)
# Print the number of letters in your name
print name_length
# Print the number of letters in your name
print (name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- past(my_name, "is programming")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 12
fav_2 <- 50
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("james", "victoria")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("james", "victoria")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n+1)f
# Add 1 to each element in `n` and print the result
print(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- 10:1
# Subtract `m` FROM `n`. Note the recycling!
n-m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave*cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2,5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1:100
# Create a vector `even` that holds the even numbers from 1 to 100
numbers <- 1:100
even <- numbers %2 == 0
evens <- numbers % 2 == 0
evens <- numbers %% 2 == 0
even <- numbers[evens]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phon_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers <= 5
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers > 5
large <- phone_numbers[large]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
larger_than_5 <- phone_numbers > 5
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(fixed>5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers>5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 ==1] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Betsutenjin"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals
$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals[["dinner"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"]["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast","lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast","lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lappy(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, "length()")
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_items <- lapply(meals, length)
append(vector, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
## install.packages("styler")
## library("styler")
#################
#### PART 1 #####
#################
# install.packages("stringr")
# library(stringr)
my_age <- 21
my_name <- "Matthew Young"
# takes in a name and age and returns a string including them both
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Hunger Games", "The City of Ember", "Frozen Solid", "Fableahaven", "An Inconvenient Truth", "Harry Potter")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
books[1]
# takes in a vector and and index and deletes the element at the given index
remove_book <- function(titles, index) {
titles[-index]
}
books_without_four <- remove_book(books, 4)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019/March/16", format = "%Y/%B/%d")
Sys.Date()
today <- Sys.Date()
spring_break - today
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list("Matt" = as.Date("1997/04/05", format = "%Y/%m/%d"), "Deb" = as.Date("1956/08/24", format = "%Y/%m/%d"), "Jeff" = as.Date("1951/09/05", format = "%Y/%m/%d"))
parent_bday <- format(birthdays[["Jeff"]], "%m/%d")
print(parent_bday)
birthdays_2019 <- lapply(lapply(birthdays, format, "2019/%m/%d"), as.Date, format = "%Y/%m/%d")
print(birthdays_2019)
# takes in a date and returns boolean true if the passed date has passed, false otherwise
date_has_passed <- function(date) {
bool <- date - Sys.Date() < 0
bool
}
date_has_passed(birthdays[["Jeff"]])
print(date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d")))
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", date - Sys.Date(), " days.", sep = "")
}
}
make_birthday_announcement("Matt", as.Date("2019/01/03", format = "%Y/%m/%d"))
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
# takes in a name and birthday, and returns a string of how many days until the next birthday
make_birthday_announcement <- function(name, bday) {
if (date_has_passed(as.Date(format(bday, "2019/%m/%d"), "%Y/%m/%d"))) {
paste(name, "'s birthday is in ", as.Date(format(bday, "2020/%m/%d")) - Sys.Date(), " days.", sep = "")
} else {
paste(name, "'s birthday is in ", bday - Sys.Date(), " days.", sep = "")
}
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
styler:::style_active_file()
print("Hi Jason :)")
print("Jason what year are you?")
print("Hi there :)")
library(httr)
library(jsonlite)
library(dplyr)
base_uri <- "https://api.propublica.org/congress/v1"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
api_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
propublica_key <- "IiTNn3RbybpSlS6aDxMKxDAqk6ZG9ourJgwTYJkT"
source("apikeys.R")
source("apikeys.R")
library(jsonlite)
library(httr)
source("apikeys.R")
library(httr)
library(jsonlite)
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
base_uri <- ("https://www.googleapis.com/youtube/v3/search?search=dogs")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri, key = api_key)
body <- fromJSON(response, "text")
response <- GET(base_uri, key = api_key)
body <- content(response, "text")
data <- fromJSON(body)
View(body)
View(data)
param <- list(key = api_key)
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list("key" = api_key, "part" = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
param <- list(key = api_key, part = "contentDetails")
response <- GET(base_uri, query = param)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/search?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
#key = {API_KEY}
api_key <- "AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54"
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/channels?part=contentDetails&mine=true")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54
&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
base_uri <- ("https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=AIzaSyCNxEitACs4FfQ6sLC63qFJ70vaypDVb54&part=snippet,contentDetails,statistics,status")
response <- GET(base_uri)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
house_listings <- read.csv("data/Metro_MedianListingPrie_AllHomes.csv", stringsAsFactors = FALSE)
shiny::runApp('C:/Users/ymatt/Documents/final_project')
library(dplyr)
library(shiny)
library(ggplot2)
library(tidyr)
source("my_ui.R")
source("my_server.R")
setwd("C:/Users/ymatt/Documents/final_project")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
my_server <- function(input, output){
output$random <- renderPlot({
ggplot(data = state_data) +
geom_point(mapping = aes(x = RegionName, y = SizeRank))
})
output$lel <- renderText({
"mufugga"
})
}
my_ui <- fluidPage(
plotOutput("random"),
titlePanel(strong("Anonymous Penguin")),
tabset_panel <- tabsetPanel(
type = "tabs",
page_one,
page_two,
page_three,
page_four,
page_five
)
)
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
library(maps)
usa <- map_data("state")
view(usa)
View(usa)
